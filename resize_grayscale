import os
import cv2
import concurrent.futures

def resize_and_convert(input_folder, output_folder, new_width=640, new_height=640):
    # 출력 폴더가 없다면 생성
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # 입력 폴더에서 모든 이미지 파일 가져오기
    image_files = [os.path.join(input_folder, filename) for filename in os.listdir(input_folder) if filename.endswith('.jpg')]

    # 이미지 리사이징 및 그레이스케일 변환 함수
    def process_image(input_path):
        try:
            # 이미지를 리사이징
            img = cv2.imread(input_path)
            img = cv2.resize(img, (new_width, new_height), interpolation=cv2.INTER_AREA)

            # 그레이스케일 변환
            grayscale_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

            # 출력 경로 설정
            filename = os.path.basename(input_path)
            output_path = os.path.join(output_folder, filename)

            # 이미지 저장
            cv2.imwrite(output_path, grayscale_img)
            print(f"Processed: {input_path} -> {output_path}")
        except Exception as e:
            print(f"Error processing {input_path}: {e}")

    # 병렬 처리 시작
    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(process_image, image_files)

# 사용 예시
input_folders = ["House", "Tree", "Person"]  # 각 이미지 폴더 경로를 지정
output_folders = ["House_Resized", "Tree_Resized", "Person_Resized"]  # 각 출력 폴더 경로를 지정
new_width = 640
new_height = 640

for input_folder, output_folder in zip(input_folders, output_folders):
    resize_and_convert(input_folder, output_folder, new_width, new_height)
